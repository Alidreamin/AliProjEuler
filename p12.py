#!/usr/bin/env python

from time import clock
from math import sqrt
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
start = clock()

# first attempt using trial division (in other words, not using any optimizations)

# generate the sequence and check every new addition to the sequence for the number of divisors

def number_divisors(num):
    total_divisors = 0
    for possible_divisor in range(2,int(num/2) + 1):
        if num % possible_divisor == 0:
            total_divisors += 1

    return total_divisors

target_not_reached = True
i = 500

while target_not_reached:
    triangle_number = sum(range(i+1))# n
    if number_divisors(triangle_number) > 499:
        target_not_reached = False
    i += 1


print(triangle_number)



# okay, so, the above method is obviously way too slow
# gotta look at other solutions just to get a correct answer the first time around













stop = clock()
print("running time is %s" % (stop-start))

