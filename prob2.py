#!/usr/bin/env python


"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

"""

# get it working
# then optimize

# at which index does sequence exceed 4 million?  don't go past that term
# let's create the sequence up to the number that exceeds 4 million


fib_seq = [1, 2, 3] # partially populated list that will house the entire subset of the fibonacci seq that we are interested
# i manually populated the first three terms so as not to have to worry about the initial building and indexing trouble, no matter
# how small that trouble may be.  the focus is on solving the problem fast
i = 2 # current index in seq
while fib_seq[i] < 4000000:
    fib_seq.append(fib_seq[i] + fib_seq[i - 1])
    i += 1

#now sum the even terms in seq generated above
sum = 0
for x in fib_seq:
    if x%2 == 0:
        sum = sum + x

print(sum)




